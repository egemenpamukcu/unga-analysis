import requests
import pandas as pd
import numpy as np
import json
import math
import pdf2image
import pytesseract
from mpi4py import MPI

'''
Reads the incomplete set of resolution text that is generated by generate_corpus.py
into a Pandas DataFrame and fills in the missing resolution text by:

1 - Converting PDF files into image files
2 - Reading image files by using Tesseract OCR Engine
3 - Inserting the extracted string into corresponding DataFrame cells
4 - Writing the complete DataFrame to a JSON file

Optical Character Recognition solution is required because some of the PDFs on the
UNGA website are scans of original documents and cannot be read by conventional PDF readers.
'''

comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()
name = MPI.Get_processor_name()


#read incomplete corpus
raw_all = pd.read_json('raw_resolutions.json')

#partition the dataset for parallel processing
n = math.ceil(len(raw_all) / size)
partitions = [raw_all[i * n:(i + 1) * n] for i in range((len(raw_all) + n - 1) // n )]

for i in range(size):
	if rank == i:
		raw = partitions[i]
		x = 0 #keeps track of processed resolutions
		errors = []
		for ind, k in raw.iterrows():
			x += 1
			if k['Text'] == '': #work only on incomplete resolutions
				print('rank:', rank, ' status:', x/len(raw), k['Resolution']) #print progress
				for t in range(2): #try again if something returns an error
					try:
						url = k['url']
						req = requests.get(url)
						pages = pdf2image.convert_from_bytes(req.content) #converts pdf into image
						res = ''
						for page in pages:
							res += pytesseract.image_to_string(page) #uses OCR to convert image into string
						k['Text'] = res #fills in the incomplete cell with resolution text
						break
					except:
						if t == 1:
							errors.append(k['Resolution']) #keeps track of problematic resolutions
						continue

		if len(errors) >= 1: #write errored out resolutions to a JSON file
			with open('ocr_errors_{}.txt'.format(i), 'w') as err:
				json.dump(errors, err)
		raw.to_json('complete_corpus_raw_{}.json'.format(i)) #write the complete dataset into a JSON file